buildscript {
    ext.kotlin_version = '1.3.10'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
        classpath 'de.dynamicfiles.projects.gradle.plugins:javafx-gradle-plugin:8.8.2'
    }
}

group 'net.panelpi'
version '1.0-beta-2'

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'org.hidetake.ssh'
apply plugin: 'javafx-gradle-plugin'

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/groups/public" }
}

sourceSets {
    main {
        kotlin {
            srcDirs = ["src/main/kotlin"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile 'com.pi4j:pi4j-core:1.2-SNAPSHOT'
    compile 'com.pi4j:pi4j-gpio-extension:1.2-SNAPSHOT'
    compile 'org.json:json:20180130'
    compile 'no.tornado:tornadofx:1.7.16'
    compile 'org.fxmisc.easybind:easybind:1.0.3'
    compile 'com.fazecast:jSerialComm:2.4.0'

    compile 'de.jensd:fontawesomefx-fontawesome:4.7.0'
    compile 'de.jensd:fontawesomefx-materialdesignfont:1.7.22'

    compile 'org.apache.logging.log4j:log4j-core:2.11.0'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.0'
    compile 'io.github.microutils:kotlin-logging:1.5.4'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task fatJar(type: Jar) {
    group = 'build'
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': "net.panelpi.PanelPiApp"
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

remotes {
    pi {
        host = 'panelpi'
        user = 'pi'
        identity = file("${System.getProperty("user.home")}/.ssh/id_rsa")
    }
}

jfx {
    mainClass = "net.panelpi.PanelPiApp"
    jfxAppOutputDir = "build/jfx/app"
    jfxMainAppJarName = "panelPi.jar"
    deployDir = "src/main/deploy"
    useEnvironmentRelativeExecutables = true
    libFolderName = "lib"

    // gradle jfxNative
    nativeOutputDir = "build/jfx/native"
    bundler = "ALL" // set this to some specific, if your don't want all bundlers running, examples "windows.app", "jnlp", ...
    nativeReleaseVersion = "1.0"
    appName = "PanelPi" // this is used for files below "src/main/deploy", e.g. "src/main/deploy/package/windows/project.ico"
    vendor = 'PanalPi'
}

task deployToPi(dependsOn: fatJar) {
    group = 'raspberrypi'
    doLast {
        ssh.run {
            session(remotes.pi) {
                //remove "piFeeder/piFeeder-${project.version}.jar"
                put from: "${buildDir}/libs/${project.name}-all-${project.version}.jar", into: "panelPi/panelPi.jar"
            }
        }
    }
}
task runOnPi {
    group = 'raspberrypi'
    doLast {
        ssh.run {
            session(remotes.pi) {
                execute "sudo killall java || true"
                execute "sudo java " +
                        "-Dprism.order=es2,es1,sw,j2d " +
                        "-Dsun.java2d.opengl=true " +
                        "-Dprism.vsync=false " +
                        "-Dprism.forceGPU=true " +
                        "-Djava.ext.dirs=/home/pi/jdk1.8.0_92/jre/lib/ext/ " +
                        "-jar panelPi/panelPi.jar"
            }
        }
    }
}
