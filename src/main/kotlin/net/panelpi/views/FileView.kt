package net.panelpi.views

import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon
import de.jensd.fx.glyphs.fontawesome.FontAwesomeIconView
import javafx.beans.value.ChangeListener
import javafx.beans.value.ObservableValue
import javafx.scene.Node
import javafx.scene.Parent
import javafx.scene.Scene
import javafx.scene.control.Button
import javafx.scene.control.TreeItem
import javafx.scene.control.TreeTableView
import javafx.scene.paint.Paint
import net.panelpi.controllers.DuetController
import net.panelpi.map
import net.panelpi.models.SDFile
import net.panelpi.models.SDFolder
import net.panelpi.models.SDItem
import tornadofx.*
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

class FileView : View() {
    companion object {
        private val dateTimeFormat = DateTimeFormatter.ofPattern("yyyy/MM/dd, HH:mm:ss")
    }

    override val root: Parent by fxml()
    private val treeTable: TreeTableView<SDItem> by fxid()
    private val duet: DuetController by inject()

    private val refresh: Button by fxid()
    private val print: Button by fxid()

    init {
        treeTable.apply {
            rootProperty().bind(duet.sdData.map { it.let { SDTreeItem(it as SDItem) } })
            isShowRoot = false

            column("File Name", SDItem::fileName) {
                style {
                    textFill = Paint.valueOf("#428bca")
                }
            }
            column<SDItem, Long>("Size", "size") {
                cellFormat { text = it.toHumanReadableByteCount() }
            }
            column<SDItem, LocalDateTime>("Last Modified", "lastModified") {
                cellFormat { text = it.format(dateTimeFormat) }
            }
            column<SDItem, Double>("Object Height", "height") {
                cellFormat { text = "$it mm" }
            }
            column<SDItem, Pair<Double, Double>>("Layer Height ", "layerHeights") {
                cellFormat { text = "${it.first} / ${it.second} mm" }
            }
            column<SDItem, List<Double>>("Filament Usage", "filament") {
                cellFormat { text = "${it.firstOrNull()} mm" }
            }
            column<SDItem, String>("Generated by", "generatedBy")

            columnResizePolicy = TreeTableView.UNCONSTRAINED_RESIZE_POLICY
        }

        refresh.setOnAction {
            duet.refreshSDData {
                treeTable.resizeColumnsToFitContent()
            }
        }

        val listener = object : ChangeListener<Scene?> {
            override fun changed(observable: ObservableValue<out Scene?>?, oldValue: Scene?, newValue: Scene?) {
                if (newValue != null) runLater(100.millis) {
                    treeTable.resizeColumnsToFitContent()
                    root.sceneProperty().removeListener(this)
                }
            }
        }
        root.sceneProperty().addListener(listener)

        print.disableProperty().bind(treeTable.selectionModel.selectedItemProperty().map { it?.value !is SDFile })

        print.setOnAction {
            val item = treeTable.selectedItem
            if (item is SDFile) {
                duet.selectFileAndPrint(item.fileName)
            }
        }
    }
}

class SDTreeItem(item: SDItem) : TreeItem<SDItem>(item, item.getIcon()) {
    companion object {
        private fun SDItem.getIcon(): Node {
            val icon = FontAwesomeIconView(if (this is SDFolder) FontAwesomeIcon.FOLDER_OPEN else FontAwesomeIcon.FILE)
            icon.style = "-glyph-size: 15px;-fx-fill: #428bca;"
            return icon
        }
    }

    init {
        if (item is SDFolder) {
            children.addAll(item.files.map { SDTreeItem(it) })
        }
    }

    override fun isLeaf(): Boolean {
        return value is SDFile
    }
}

